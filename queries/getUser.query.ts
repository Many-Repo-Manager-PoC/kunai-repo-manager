// GENERATED by @gel/generate v0.6.3

import type {Executor} from "gel";

export type GetUserArgs = {
  readonly "login"?: string | null;
  readonly "user_id"?: number | null;
};

export type GetUserReturns = Array<{
  "avatar_url": string;
  "email": string;
  "id": string;
  "login": string;
  "name": string;
  "role_type": string;
  "site_admin": boolean;
  "user_id": number;
  "events_url": string | null;
  "followers_url": string | null;
  "following_url": string | null;
  "gists_url": string | null;
  "gravatar_id": string | null;
  "html_url": string | null;
  "last_updated": Date | null;
  "node_id": string | null;
  "organizations_url": string | null;
  "received_events_url": string | null;
  "repos_url": string | null;
  "starred_at": string | null;
  "starred_url": string | null;
  "subscriptions_url": string | null;
  "url": string | null;
  "user_view_type": string | null;
}>;

export function getUser(client: Executor, args: GetUserArgs): Promise<GetUserReturns> {
  return client.query(`\
select User { **
} filter assert_exists(User.user_id) ?= <optional int64>$user_id;

select User { **
} filter assert_exists(User.login) ?= <optional str>$login;

# This is all one query, but it's split up for readability. All filters are optional. 
# If no filters are provided, all Users will be returned.`, args);

}
