// GENERATED by @gel/generate v0.6.3

import type {Executor} from "gel";

export type InsertPackageJsonArgs = {
  readonly "name": string;
  readonly "package_version": string;
  readonly "repository": string;
  readonly "dependencies": ReadonlyArray<{
  readonly "name": string;
  readonly "dependency_version": string;
}>;
  readonly "dev_dependencies": ReadonlyArray<{
  readonly "name": string;
  readonly "dev_dependency_version": string;
}>;
};

export type InsertPackageJsonReturns = {
  "id": string;
  "name": string;
  "package_version": string;
  "repository": {
    "id": string;
    "name": string;
  };
};

export function insertPackageJson(client: Executor, args: InsertPackageJsonArgs): Promise<InsertPackageJsonReturns> {
  return client.queryRequiredSingle(`\
with 
  NewPackageJson := (insert PackageJson {
    name := <str>$name,
    package_version := <str>$package_version,
    repository := <Repository>$repository,
  }),
  InsertProdDependencies := (
    for dependency in array_unpack(<array<tuple<name: str, dependency_version: str>>>$dependencies)
    union (
      insert ProdDependency {
        name := <str>dependency.name,
        dependency_version := <str>dependency.dependency_version,
        package_json := assert_single((
          select NewPackageJson
        )),
        repository := <Repository>assert_single((
          select NewPackageJson.repository
        )),
      }
    )
  ),
  InsertDevDependencies := (
    for dev_dependency in array_unpack(<array<tuple<name: str, dev_dependency_version: str>>>$dev_dependencies)
    union (
      insert DevDependency {
        name := <str>dev_dependency.name,
        dependency_version := <str>dev_dependency.dev_dependency_version,
        package_json := assert_single((
          select NewPackageJson
        )),
        repository := <Repository>assert_single((
          select NewPackageJson.repository
        )),
      }
    )
  )
select NewPackageJson {
  id,
  name,
  package_version,
  repository: {
    id,
    name
  }
};`, args);

}
