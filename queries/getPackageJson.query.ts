// GENERATED by @gel/generate v0.6.3

import type {Executor} from "gel";

export type GetPackageJsonArgs = {
  readonly "repository_id"?: number | null;
  readonly "name"?: string | null;
};

export type GetPackageJsonReturns = {
  "repository_id": number;
  "name": string;
  "package_version": string;
  "id": string;
  "last_updated": Date | null;
  "dependencies": Array<{
    "dependency_type": ("Dev" | "Prod");
    "dependency_version": string;
    "id": string;
    "last_updated": Date | null;
    "name": string;
    "repository_id": number;
  }>;
  "dev_dependencies": Array<{
    "dependency_type": ("Dev" | "Prod");
    "dependency_version": string;
    "id": string;
    "last_updated": Date | null;
    "name": string;
    "repository_id": number;
  }>;
} | null;

export function getPackageJson(client: Executor, args: GetPackageJsonArgs): Promise<GetPackageJsonReturns> {
  return client.querySingle(`\
# get packageJson by repoID
select assert_single(
  PackageJson { ** }
  filter assert_exists(PackageJson.repository_id) ?= <optional int64>$repository_id
);

# get packageJson by repo name
select assert_single(
  PackageJson { ** }
  filter assert_exists(Repository.full_name) ?= <optional str>$name
);

# This is all one query, but it's split up for readability. All filters are optional.`, args);

}
